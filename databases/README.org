# Databases

## Authors: Victoria Berkowitz, Alex Moore

## Lesson:
Interactive Google Collab Links

* MiniLesson1: https://colab.research.google.com/drive/1STM0VwF5ybRMDzPPnYH2dFUKbMoYfNho?usp=sharing
* MiniLesson2: https://colab.research.google.com/drive/1STM0VwF5ybRMDzPPnYH2dFUKbMoYfNho?usp=sharing
* MiniLesson3: https://colab.research.google.com/drive/1LF57djEbc8IlBTPJbwQY23xHp4bMQtCf?usp=sharing

These collab notebooks use the following files placed in the repository: scanTimes.csv, periodAttendance.csv, and bio.csv.

## Homework:
#### Homework Assignment:  Write a SQL query that retrieves the following records:  https://drive.google.com/file/d/1Vy6VDlqOZy8aV7zceGFSJNbbpFH06z1G/view?usp=sharing
 Write a SQL join query that retrieves from the tables shared with you the records of all of the unexcused period attendance absences in the school for the week of  1-24-22 sorted by student last name ascending.  You will use the resulting table of results, which you can call allCuts, in the async assignment.  Consider a cut to be any instance of a student scanning into the building and being marked absent in a class.  You will retrieve only the first name, last name, student ID, grade, scanTime, status, date, courseSection, attendance, period, and teacher. Skills Learned:  SELECT, JOIN, ORDER BY, aliases, intro. to SQL Functions
 
* Hint #1:  You want to do an inner join on the absence table and the scan table, but you have no unique primary key and foreign key to join on.  Would it be possible to join on both the studentID and the date?  The syntax might look like this:  SELECT * FROM table1 AS t1 INNER JOIN table2 AS t2 ON t1.studentID=t2.studentID AND t1.date=t2.date
* Hint #2:  Before you can make the inner join work on the studentID and date, you need to update the date in one table or the other so that the formats match.  How can we modify the date programmatically within a query?  substr() can extract a string from the first character to first instance of the ' ' character, and instr() can return the position of the first occurrence of ' '.  Could these two be used together to create a new date field?  The syntax might look like this:  substr(myField, 1, instr(myField,' ')).
* Hint #3:  Now we are ready to retrieve only the relevant fields for our records.  Some of the fields will exist in both tables, so you will need to specify what table the field is coming from if it shares a name with one in the other table.  This is done with the following syntax:  SELECT myTable1.myField1, myTable2.myField2... If you used aliases in your JOIN, be sure to use the alias as the name of the table.

## Async:
Create and post in the Slack at least one query from the challenge list below.
SQL Challenge 1)  Intermediate - Write a SQL Query that retrieves the following records:  https://drive.google.com/file/d/1kbkE8PFhoTU2ggG6zg1O3iOYoIk4w7Zh/view?usp=sharing  Write a query using the allCuts table to retrieve the list of all teachers whose classes are cut most often.
>Skills Learned:  SELECT, GROUP BY, ORDER BY, aggregate functions, nested tables, calculated fields
Hint #1:  You will be using a nested query.  The inner query retrieves the allCuts table, which will be surrounded by parentheses, and you will be selecting from this table.  Use the following syntax:  SELECT * FROM ( Enter the full text of your allCuts query here. ) AS allCuts
Hint #2:  When you group by a field, every field in your returned table must be either that field or the result of an aggregate function.  For example, if you grouped by teacher, you could use the line SELECT teacher, COUNT(*) AS total FROM…
Hint #3: Recall that GROUP BY must appear below the query that retrieves that allCuts table.
OR
SQL Challenge 2)  Easy - Write a SQL Query that retrieves the following records:   https://drive.google.com/file/d/1hvChuoJ3_IbeP9j93Q2g82hfQSdkfcdr/view?usp=sharing  Use the allCuts table and the biographical table to retrieve a list of student cuts with all information from both tables with no duplication of fields.
>Skills Learned:  SELECT, LEFT JOIN, nested tables
Hint #1: You will be using a nested query.  The inner query retrieves the allCuts table, which will be surrounded by parentheses, and you will be selecting from this table.  Use the following syntax:  SELECT * FROM ( Enter the full text of your allCuts query here. ) AS allCuts
Hint #2:  This is going to be a LEFT JOIN of the allCuts table and the biographical table because you want to include all students regardless of whether contact information is available for them in the biographical table.  This LEFT JOIN is much easier than the allCuts INNER JOIN because the primary key and foreign key already exist as unique identifiers in the two tables.
Hint #3:  If you are retrieving a field that is named in both tables, you will need to indicate which version you are taking using syntax like this:  a.StudentID
OR
SQL Challenge 3)  Difficult - Write a SQL Query that retrieves the following records:  https://drive.google.com/file/d/1hc5zdLhfIkK2KN9aMMwtkwVUIeEegexH/view?usp=sharing  Write a query using the allCuts table to retrieve the list of sections of math that are cut most often from greatest to least including courseSection, teacher, and totalCuts among teachers Siena, Jarding, Rael, Oto, Klar, and Pylant
>Skills Learned:  SELECT, GROUP BY, HAVING, nested tables, logical operators, ORDER BY, IN()
Hint #1:  You will be using a nested query.  The inner query retrieves the allCuts table, which will be surrounded by parentheses, and you will be selecting from this table.  Use the following syntax:  SELECT * FROM ( Enter the full text of your allCuts query here. ) AS allCuts
Hint #2: This will include GROUP BY, but you want to find a way to use only math classes.  Note that keyword HAVING is used with GROUP BY instead of WHERE.
Hint #3:  You can use the SQL IN() function to ensure that one of the fields includes only values in a list.  If you run into issues with syntax, it is sometimes helpful to use another level of nesting; i.e., SELECT * FROM (SELECT * FROM( SELECT * FROM myTable) AS myTable2) AS myTable3  This can take care of issues with using aggregate functions on your table and also using non-aggregate functions with the same data. 
OR
SQL Challenge 4)  Quite Difficult - Write a SQL Query that retrieves the following records:  https://drive.google.com/file/d/1cx3ltV-CX3FuTn66SQEjKi2I_NWp4DDN/view?usp=sharing  Write a query using the allCuts table to retrieve a table listing every student with at least one cut and the number of times that student has cut class for each period of the day and the total number of cuts sorted by student last name.
>Skills Learned:  SELECT, GROUP BY, HAVING, nested tables, IIF(), aggregate functions, calculated fields, aliasing
Hint #1: You will be using a nested query.  The inner query retrieves the allCuts table, which will be surrounded by parentheses, and you will be selecting from this table.  Use the following syntax:  SELECT * FROM ( Enter the full text of your allCuts query here. ) AS allCuts
Hint #2:  You do not need to check for at least one cut because your allCuts table already provides this.  You can try to solve this one by creating calculated fields, which are made with one or more functions and given a name with an alias.  IIF(condition, valueIfTrue, valueIfFalse) is a powerful SQL function that can be used as a calculated field to return values contingent upon table data.  For instance, IIF(period='1', period, 0) AS Pd1 would create a field Pd1 that is populated by the number of period 1 cuts for that student.
Hint #3:  This is starting to come together, but now we want to normalize the data so that each student is on a single line.  Let's make a nested table so that we can use our aggregate functions on our existing data set.  What aggregate functions would be most useful here?  If we GROUP BY StudentID, Last, First, we can use MAX(Pd1) AS Pd1_ to get the highest period 1 cuts on all rows, which would be the first period cuts for that student.  The same works for Pd2_ and so on.  To get the total, we can add together the values of all periods.
OR
SQL Challenge 5)  Coder’s Choice - Create any query that would retrieve data you believe a school administration may find to be useful in advancing student learning. 
